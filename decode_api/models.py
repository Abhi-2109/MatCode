from django.db import models
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.models import BaseUserManager


# Create your models here.

class UserProfileManager(BaseUserManager):
    """ Helps Django work with our custom user model"""

    def create_user(self,email,name,password=None):
        """ Creates a nw user profile object. """

        if not email:
            raise ValueError("Users must have an email address.")

        # normalize means to convert it into email format means lowercase
        email = self.normalize_email(email)
        user = self.model(email= email, name = name)

        # The set password Function will encrpt the password for us
        # This is best way to make a secure system
        # The hash code generated by this function will get save in the database
        user.set_password(password)
        user.save(using = self._db)

        return user

    # Function to create Super user
    # It has full control over the system
    def create_superuser(self,email,name,password):
        """ creates and saves a new superuser with give details"""
        user = self.create_user(email,name,password)

        user.is_superuser = True
        user.is_staff = True

        user.save(using = self._db)



class UserProfile(AbstractBaseUser, PermissionsMixin):
    """
    Represent a user profile inside our system
    """
    email = models.EmailField(max_length = 255, unique = True)
    name = models.CharField(max_length = 255)
    created_on = models.DateField(auto_now_add=True)
    #profile_pic = models.ImageField()
    languages = models.CharField(max_length=255, null=True)
    score = models.IntegerField(default=0)

    # To see user is active or not
    is_active = models.BooleanField(default = True)
    is_staff = models.BooleanField(default = False)
    
    objects = UserProfileManager()

    # It is used as a username to login
    # A standard django has USERNAME_FIELD. It is like a handle to login
    # replacing it with Email
    USERNAME_FIELD = 'email'
    # REQUIRED_FIELDS Are the fields that are required for all the USER
    # We do not put EMAIL because It is USERNAME_FIELD. So it will be already required
    REQUIRED_FIELDS = ['name']

    def get_full_name(self):
        """
            Used to get a user full name.
        """
        return self.name

    def get_short_name(self):
        """Used to get a users short name """

        return self.name

    def __str__(self):
        """
        Django uses this when it needs to convert the Object to a string
        """
        return self.email



class Problem(models.Model):
    
    """Represent a problem"""
    
    name = models.CharField(null=False, max_length=255)
    question = models.TextField(null=False)
    LEVELS = (
        ('E', 'Easy'),
        ('M', 'Medium'),
        ('H', 'Hard'),
    )
    level = models.CharField(max_length=1,choices=LEVELS)
    sample_input = models.TextField(null=False)
    sample_output = models.TextField(null=False)
    input_format = models.TextField(null=False)
    output_format = models.TextField(null = False)
    constraints = models.TextField()
    marks = models.IntegerField()
    hint = models.TextField(null=True, blank=True)
    
    solution_cpp = models.TextField(null=True, blank=True)
    solution_python = models.TextField(null=True, blank= True)
    solution_c = models.TextField(null=True, blank=True)
    solution_java = models.TextField(null=True, blank=True)
    
    
    input1 = models.TextField(null= True, blank=True)
    output1 = models.TextField( null = True, blank=True)
    input2 = models.TextField(null = True, blank=True)
    output2 = models.TextField(null=True, blank=True)
    input3 = models.TextField(null=True, blank=True)
    output3 = models.TextField(null = True, blank=True)

    def __str__(self):
        return str(self.name).upper()

class Solution(models.Model):
    """ Stores the solution"""
    user_id = models.ForeignKey(UserProfile, on_delete=models.CASCADE)
    problem_id = models.ForeignKey(Problem,on_delete=models.CASCADE)
    language_id = models.IntegerField(default=0)
    solution_text = models.TextField(null=True, blank=True)
    
    def __str__(self):
        return str(self.problem_id) + " " + str(self.user_id) 
    

class Stats(models.Model):
    """Stores the statsistics"""
    user_id = models.ForeignKey(UserProfile, on_delete= models.CASCADE)
    total_compiled = models.IntegerField(default=0)
    total_solved = models.IntegerField(default=0)

    cpp_solved = models.IntegerField(default=0)
    python_solved = models.IntegerField(default=0)
    c_solved = models.IntegerField(default=0)
    java_solved = models.IntegerField(default=0)
    other_solved = models.IntegerField(default= 0)
    
    def __str__(self):
        return str(self.user_id)

class Compile(models.Model):
    """Compile and Store the Problem"""
    source_code = models.TextField(default="")
    language_id = models.CharField(max_length=2)
    stdin = models.TextField(default="")
    expected_output = models.TextField(default="")

    def __str__(self):
        return str(self.source_code)



